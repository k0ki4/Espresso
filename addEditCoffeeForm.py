# Form implementation generated from reading ui file 'addEditCoffeeForm.ui'
#
# Created by: PyQt6 UI code generator 6.7.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import sqlite3

from PyQt6 import QtCore, QtWidgets
from PyQt6.QtCore import pyqtSignal
from PyQt6.QtGui import QStandardItemModel, QStandardItem
from PyQt6.QtWidgets import QMainWindow, QDialog, QLineEdit, QFormLayout, QPushButton

from CustomD import CustomDialog


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1079, 484)
        MainWindow.setMinimumSize(QtCore.QSize(1079, 484))
        MainWindow.setMaximumSize(QtCore.QSize(1079, 484))
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(parent=self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(390, 10, 681, 461))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.tableView = QtWidgets.QTableView(parent=self.verticalLayoutWidget)
        self.tableView.setObjectName("tableView")
        self.verticalLayout.addWidget(self.tableView)
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(parent=self.centralwidget)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(10, 10, 371, 131))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_2 = QtWidgets.QLabel(parent=self.verticalLayoutWidget_2)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_2.addWidget(self.label_2)
        self.verticalLayoutWidget_3 = QtWidgets.QWidget(parent=self.centralwidget)
        self.verticalLayoutWidget_3.setGeometry(QtCore.QRect(10, 260, 371, 99))
        self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_3)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.new_recipe = QtWidgets.QPushButton(parent=self.verticalLayoutWidget_3)
        self.new_recipe.setObjectName("new_recipe")
        self.verticalLayout_3.addWidget(self.new_recipe)
        self.label = QtWidgets.QLabel(parent=self.verticalLayoutWidget_3)
        self.label.setObjectName("label")
        self.verticalLayout_3.addWidget(self.label)
        self.comboBox = QtWidgets.QComboBox(parent=self.verticalLayoutWidget_3)
        self.comboBox.setObjectName("comboBox")
        self.verticalLayout_3.addWidget(self.comboBox)
        self.edit_recipe = QtWidgets.QPushButton(parent=self.verticalLayoutWidget_3)
        self.edit_recipe.setObjectName("edit_recipe")
        self.verticalLayout_3.addWidget(self.edit_recipe)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_2.setText(_translate("MainWindow",
                                        "<html><head/><body><p align=\"center\"><span style=\" font-size:18pt; font-weight:600;\">Просмотр</span></p></body></html>"))
        self.new_recipe.setText(_translate("MainWindow", "Новый Рецепт"))
        self.label.setText(_translate("MainWindow",
                                      "<html><head/><body><p><span style=\" font-weight:600;\">Выберите для редактирования:</span></p></body></html>"))
        self.edit_recipe.setText(_translate("MainWindow", "Редактировать рецепт"))


class AddCoffeeDialog(QDialog):
    def __init__(self, *args, parent=None, edit=False):
        super().__init__(parent)
        if not edit:
            self.new_coffee()
        else:
            self.data = args[0]
            self.edit_coffee()

    def new_coffee(self):
        self.setWindowTitle("Добавить новое кофе")

        layout = QFormLayout(self)

        self.name_input = QLineEdit(self)
        layout.addRow("Название:", self.name_input)

        self.roasting_input = QLineEdit(self)
        layout.addRow("Степень обжарки от 0 до 10:", self.roasting_input)

        self.ground_or_in_grains_input = QLineEdit(self)
        layout.addRow("Молотый/в зёрнах (М/З):", self.ground_or_in_grains_input)

        self.description_of_the_taste_input = QLineEdit(self)
        layout.addRow("Описание вкуса:", self.description_of_the_taste_input)

        self.price_volume_input = QLineEdit(self)
        layout.addRow("Цена:", self.price_volume_input)

        self.packing_volume_input = QLineEdit(self)
        layout.addRow("Объем упаковки:", self.packing_volume_input)

        self.button_box = QPushButton("Добавить")
        self.button_box.clicked.connect(self.accept)
        layout.addRow(self.button_box)

    def edit_coffee(self):
        self.setWindowTitle("Изменить кофе")
        print(self.data)
        layout = QFormLayout(self)

        self.name_input = QLineEdit(self)
        self.name_input.setText(self.data[1])
        layout.addRow("Название:", self.name_input)

        self.roasting_input = QLineEdit(self)
        self.roasting_input.setText(str(self.data[2]))
        layout.addRow("Степень обжарки от 0 до 10:", self.roasting_input)

        self.ground_or_in_grains_input = QLineEdit(self)
        self.ground_or_in_grains_input.setText(self.data[3])
        layout.addRow("Молотый/в зёрнах (М/З):", self.ground_or_in_grains_input)

        self.description_of_the_taste_input = QLineEdit(self)
        self.description_of_the_taste_input.setText(self.data[4])
        layout.addRow("Описание вкуса:", self.description_of_the_taste_input)

        self.price_volume_input = QLineEdit(self)
        self.price_volume_input.setText(str(self.data[5]))
        layout.addRow("Цена:", self.price_volume_input)

        self.packing_volume_input = QLineEdit(self)
        self.packing_volume_input.setText(str(self.data[6]))
        layout.addRow("Объем упаковки:", self.packing_volume_input)

        self.button_box = QPushButton("Сохранить")
        self.button_box.clicked.connect(self.accept)
        layout.addRow(self.button_box)

    def get_data(self):
        return (self.name_input.text(), self.roasting_input.text(),
                self.ground_or_in_grains_input.text(), self.description_of_the_taste_input.text(),
                self.price_volume_input.text(), self.packing_volume_input.text())


class CoffeeApp(QMainWindow, Ui_MainWindow):
    closed_w = pyqtSignal()

    def __init__(self):
        super().__init__()
        super().setupUi(self)
        self.initUI()

    def initUI(self):
        self.model = QStandardItemModel(0, 6)
        self.model.setHorizontalHeaderLabels(
            ['ИД', 'Название', 'Степень обжарки', 'Молотый/ в зёрнах', "Описание", 'Цена', 'Объём пачки'])
        self.tableView.setModel(self.model)
        self.new_recipe.clicked.connect(self.create_recipe)
        self.edit_recipe.clicked.connect(self.try_edit)
        self.update_table()
        self.update_edit_box()

    def update_edit_box(self):
        self.comboBox.clear()
        with sqlite3.connect('coffee.db') as db:
            cursor = db.cursor()
            data = cursor.execute("SELECT id, sort_name FROM coffee_table").fetchall()
            data = list(map(lambda x: (str(x[0]), x[1]), data))
        for item in data:
            self.comboBox.addItem(" ".join(item))

    def update_table(self):
        self.model.clear()
        self.model = QStandardItemModel(0, 6)
        self.model.setHorizontalHeaderLabels(
            ['ИД', 'Название', 'Степень обжарки', 'Молотый/ в зёрнах', "Описание", 'Цена', 'Объём пачки'])
        self.tableView.setModel(self.model)
        with sqlite3.connect('coffee.db') as db:
            cursor = db.cursor()
            coffee_data = cursor.execute("SELECT * FROM coffee_table").fetchall()
            print(coffee_data)
        for item in coffee_data:
            if coffee_data:
                row_position = self.model.rowCount()
                for column_index, value in enumerate(item):
                    self.model.setItem(row_position, column_index, QStandardItem(str(value)))

    def create_recipe(self):
        dialog = AddCoffeeDialog(parent=self)
        if dialog.exec() == QDialog.DialogCode.Accepted:
            self.add_coffee(dialog.get_data())

    def add_coffee(self, data):
        try:
            name, roasting, ground_or_in_grains, \
                description_of_the_taste, price, \
                packing_volume = data

            if not roasting.isdigit():
                raise Exception("Неверный формат: Степень обжарки содежрит буквы")
            else:
                roasting = int(roasting)
            print(ground_or_in_grains)
            if ground_or_in_grains != 'М' and ground_or_in_grains != 'З':
                raise Exception("Неверный формат: Молотый/ в зёрнах")

            if not price.isdigit():
                raise Exception("Неверный формат: Цена содержит символы отличные от цифр")
            else:
                price = int(price)

            if not packing_volume.isdigit():
                raise Exception("Неверный формат: Объём содержит символы отличные от цифр")
            else:
                packing_volume = int(packing_volume)

            with sqlite3.connect('coffee.db') as db:
                cursor = db.cursor()
                cursor.execute("INSERT INTO coffee_table VALUES (NULL, ?, ?, ?, ?, ?, ?)",
                               (name, roasting, ground_or_in_grains, description_of_the_taste,
                                price, packing_volume))
                print("Новый рецепт сохранён")
                dialog = CustomDialog(self, "Статус", "Рецепт сохранён")
                dialog.exec()
                self.update_table()
                self.update_edit_box()
        except Exception as error:
            err = CustomDialog(self, "Ошибка", f"{error}")
            err.exec()
            print(error)

    def try_edit(self):
        id_coffee = int(self.comboBox.currentText().split()[0])
        with sqlite3.connect('coffee.db') as db:
            cursor = db.cursor()
            data = cursor.execute("SELECT * FROM coffee_table WHERE id = ?", (id_coffee,)).fetchone()

        dialog = AddCoffeeDialog(data, parent=self, edit=True)
        if dialog.exec() == QDialog.DialogCode.Accepted:
            self.edited_coffee(id_coffee, dialog.get_data())

    def edited_coffee(self, id_coffee, data):
        try:
            name, roasting, ground_or_in_grains, \
                description_of_the_taste, price, \
                packing_volume = data

            if not roasting.isdigit():
                raise Exception("Неверный формат: Степень обжарки содежрит буквы")
            else:
                roasting = int(roasting)
            print(ground_or_in_grains)
            if ground_or_in_grains != 'М' and ground_or_in_grains != 'З':
                raise Exception("Неверный формат: Молотый/ в зёрнах")

            if not price.isdigit():
                raise Exception("Неверный формат: Цена содержит символы отличные от цифр")
            else:
                price = int(price)

            if not packing_volume.isdigit():
                raise Exception("Неверный формат: Объём содержит символы отличные от цифр")
            else:
                packing_volume = int(packing_volume)

            with sqlite3.connect('coffee.db') as db:
                cursor = db.cursor()
                cursor.execute(
                    "UPDATE coffee_table "
                    "SET sort_name = ?,"
                    "roasting = ?,"
                    "ground_or_in_grains = ?,"
                    "description_of_the_taste = ?,"
                    "price = ?,"
                    "packing_volume = ?"
                    "WHERE id = ?",
                    (name, roasting, ground_or_in_grains, description_of_the_taste, price, packing_volume, id_coffee))
                print("Рецепт обновлён")
                dialog = CustomDialog(self, "Статус", "Рецепт обновлён")
                dialog.exec()
                self.update_table()
                self.update_edit_box()
        except Exception as error:
            err = CustomDialog(self, "Ошибка", f"{error}")
            err.exec()
            print(error)

    def closeEvent(self, event):
        self.closed_w.emit()
        super().closeEvent(event)
